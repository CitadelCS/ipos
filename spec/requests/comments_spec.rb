 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/comments", type: :request do
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  # let(:valid_attributes) {subject(create :comment)}
  # let(:invalid_attributes) { }
  
  before :all do
    Comment.destroy_all
    User.destroy_all
    Discussion.destroy_all
    
    @user_1 = User.create!(email: "Bob@gmail.com", password: "abc")
    @discussion_1 = Discussion.create!(title: "This is a discussion")
    @comment_1 = Comment.create!(body: "This is a comment", user: @user_1, discussion: @discussion_1)
    @comment_2 = Comment.create!(body: "This is another comment", user: @user_1, discussion: @discussion_1)
  end

  describe "GET /index" do
    it "renders a successful response" do
      visit "/comments"
      
      expect(page.status_code).to eq(200)
      expect(page).to have_content(@comment_1.body)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      visit comment_path(@comment_1)
      
      expect(page.status_code).to eq(200)
      expect(page).to have_content(@comment_1.body)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_comment_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      comment = Comment.create! valid_attributes
      get edit_comment_url(comment)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post comments_url, params: { comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the created comment" do
        post comments_url, params: { comment: valid_attributes }
        expect(response).to redirect_to(comment_url(Comment.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post comments_url, params: { comment: invalid_attributes }
        }.to change(Comment, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post comments_url, params: { comment: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested comment" do
        # comment = Comment.create! valid_attributes
        patch comment_url(comment), params: { comment: new_attributes }
        comment.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the comment" do
        # comment = Comment.create! valid_attributes
        patch comment_url(comment), params: { comment: new_attributes }
        comment.reload
        expect(response).to redirect_to(comment_url(comment))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        # comment = Comment.create! valid_attributes
        patch comment_url(comment), params: { comment: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested comment" do
      # comment = Comment.create! valid_attributes
      expect {
        delete comment_url(comment)
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      # comment = Comment.create! valid_attributes
      delete comment_url(comment)
      expect(response).to redirect_to(comments_url)
    end
  end
end
